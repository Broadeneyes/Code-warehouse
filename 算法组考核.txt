#include<bits/stdc++.h>  

using namespace std;  

const int INF = 0x3f3f3f3f;  

typedef pair<int, int> P;  

char maze[100][101];  
int N, M;  
int sx, sy; //起点的位置  
int gx, gy; //终点的位置  
  
int d[100][100];//储存起点到某一点的距离  
int dx[4] = { 1,0,-1,0 }, dy[4] = { 0,1,0,-1 }; //表明每次x和y方向的位移  
  
void bfs()  
{  
    queue<P> que;  
    for (int i = 0; i < N; i++)  
        for (int j = 0; j < M; j++)  
            d[i][j] = INF;  //初始化所有点的距离为INF  
    que.push(P(sx, sy));  
    d[sx][sy] = 0;  //从起点出发将距离设为0，并放入队列首端  
  
    while (que.size())  
    {  
        P p = que.front(); que.pop();//弹出队首元素  
        if(p.first == gx&&p.second == gy) break; //已经到达终点则退出  
  
        for (int i = 0; i < 4; i++)  
        {  
            int nx = p.first + dx[i];  
            int ny = p.second + dy[i];//移动后的坐标  
           
            if (0 <= nx&&nx < N && 0 <= ny&&ny < M &&maze[nx][ny] != '#'&&d[nx][ny] == INF)
            {  
                que.push(P(nx, ny));    //可以移动则设定距离为之前加一，放入队列  
                d[nx][ny] = d[p.first][p.second] + 1;  
            }  
        }  
    }  
  
}  
  
int main()  
{  
    cout<<"注：#表示障碍物，*表示可以通过，@表示起点, $表示终点"<<endl
		<<"    最大边长为100."
		<<endl<<endl
		<<"请输入长和宽：" ;
	scanf("%d %d",&N,&M);  
    for (int n = 0; n < N; n++)  
        scanf("%s",&maze[n]);  
    for (int i = 0; i < N; i++)  
        for (int j = 0; j < M; j++)  
        {  
            if (maze[i][j] == '$')  
            {  
                sx = i; sy = j;  
            }  
            if (maze[i][j] == '@')  
            {  
                gx = i; gy = j;  
            }  
        }  
    bfs();  
    printf("%d\n",d[gx][gy]+1);  
  
    return 0;  
}  